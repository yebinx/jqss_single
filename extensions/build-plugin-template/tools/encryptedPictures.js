import imagemin from 'imagemin';
import path, { dirname } from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

const MAXENCRYSIGBYTENUM = 10;
const BYTEMAP = [0x4c, 0x5, 0x24, 0xf3, 0x21, 0x11, 0xb5, 0x4a, 0x71, 0x2, 0x7d, 0xbf, 0x1a, 0x59, 0xac, 0xd2, 0x0, 0xd1, 0xdf, 0xc7, 0x10, 0xa3, 0xf1, 0xb9, 0xca, 0xe, 0xa4, 0xea, 0x88, 0x38, 0x9, 0x5b, 0x7c, 0xcc, 0x47, 0x43, 0x27, 0xfe, 0x94, 0x58, 0xd8, 0x2c, 0x72, 0x6c, 0x3c, 0x34, 0xdc, 0x78, 0xaa, 0x1e, 0xfb, 0xb0, 0xd5, 0x66, 0xc8, 0xab, 0x30, 0x9e, 0xd3, 0x7b, 0xe8, 0x93, 0x20, 0x41, 0xb7, 0xda, 0x1, 0x63, 0x23, 0x14, 0x64, 0x8e, 0xa6, 0x89, 0xd9, 0xae, 0xe2, 0xa0, 0xcf, 0xed, 0xe4, 0x2f, 0xc2, 0x3a, 0x87, 0xfc, 0xb2, 0xe1, 0x60, 0x99, 0x9d, 0x97, 0x2e, 0x19, 0xd, 0xb, 0xc0, 0xc9, 0x80, 0xb1, 0xa1, 0x15, 0x4f, 0x1b, 0x95, 0x6a, 0xb6, 0x6f, 0x32, 0xd0, 0xa9, 0x36, 0x22, 0x8c, 0xb8, 0x33, 0xef, 0x1f, 0x2d, 0xeb, 0x25, 0xaf, 0x31, 0xdd, 0x46, 0x61, 0x16, 0x4b, 0xc, 0x45, 0x3d, 0xd4, 0x7e, 0xf5, 0x7f, 0x9f, 0xd7, 0xc5, 0xd6, 0xf8, 0xb3, 0x92, 0x12, 0xe5, 0x8a, 0x81, 0x84, 0x3f, 0x69, 0x28, 0x8f, 0x53, 0xe3, 0x8, 0xf, 0x29, 0xec, 0x6, 0x44, 0x62, 0xdb, 0x54, 0x74, 0x56, 0x1c, 0x26, 0x5f, 0x6d, 0xe9, 0x98, 0x83, 0x9c, 0x85, 0xf2, 0x8d, 0x5a, 0x9a, 0x52, 0x49, 0xba, 0x3b, 0x77, 0x5e, 0xcd, 0x79, 0xbb, 0xad, 0x37, 0xc3, 0xff, 0x65, 0x91, 0xbe, 0x40, 0x7, 0xbc, 0x3, 0x55, 0xa2, 0x48, 0x50, 0x5c, 0x90, 0x39, 0x76, 0x2a, 0x2b, 0x82, 0xde, 0x1d, 0xc1, 0xfa, 0x7a, 0xa7, 0xce, 0x4, 0xe0, 0x68, 0x35, 0xa5, 0x57, 0xc4, 0x75, 0xb4, 0xe6, 0xf9, 0x67, 0xe7, 0x96, 0xfd, 0x51, 0xbd, 0x8b, 0x17, 0x13, 0xcb, 0xa, 0xee, 0xf6, 0x3e, 0x4d, 0xf7, 0x9b, 0x42, 0x70, 0xa8, 0x18, 0x73, 0xf0, 0xc6, 0x6e, 0x5d, 0x86, 0x4e, 0xf4, 0x6b];

let goto = () => {
    const __dirname = dirname(fileURLToPath(import.meta.url));

    const p = __dirname.replace("extensions\\build-plugin-template\\tools", "build\\web-mobile\\assets");

    let fileList = [];

    let getList = (folderPath) => {
        let files = fs.readdirSync(folderPath);
        files.forEach(file => {
            let filePath = path.join(folderPath, file);
            let stats = fs.statSync(filePath);
            if (stats.isFile()) {
                let type = path.extname(filePath)
                if (type == ".png" || type == ".jpg") {
                    fileList.push(filePath);
                }
            } else {
                getList(filePath);
            }
        });
    }

    try {
        fs.unlinkSync(path.join(dirname(fileURLToPath(import.meta.url)), "log.txt"));
    } catch (error) { }

    function log(...arg) {
        let file = path.join(dirname(fileURLToPath(import.meta.url)), "log.txt");
        let isExist = fs.existsSync(file);
        let str = isExist ? fs.readFileSync(file, 'utf-8') : '';
        fs.writeFileSync(file, str + "\n" + JSON.stringify(arg));
    }

    getList(p);

    let encrypted = () => {
        fileList.forEach((file) => {
            let bin = fs.readFileSync(file, "binary");
            let data = Buffer.from(bin, "binary");
            let dataView = new DataView(data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength));
            let maxlength = MAXENCRYSIGBYTENUM > dataView.byteLength ? dataView.byteLength : MAXENCRYSIGBYTENUM;
            for (let i = 0; i < maxlength; i++) {
                let index = BYTEMAP.indexOf(dataView.getUint8(i));
                dataView.setUint8(i, index);
                fs.writeFileSync(file, dataView);
            }
        })
    }

    encrypted();
}

goto();